%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Wed May 15 07:47:17 2013
%%Title: /Users/tking/gaf/designs/My Designs/Bone_JTAG/Bone_JTAG_pg4.sch
%%Author: tking
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
8113 500 translate 90 rotate
0.454545 0.454545 scale
-1000 -1000 translate
gsave
gsave
true false true false 208.000000 [(11) ] 0 22000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(10) ] 0 20000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(9) ] 0 18000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(8) ] 0 16000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(7) ] 0 14000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(6) ] 0 12000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(5) ] 0 10000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(4) ] 0 8000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(3) ] 0 6000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(2) ] 0 4000 17900 144.444443 text
grestore
gsave
true false true false 208.000000 [(1) ] 0 2000 17900 144.444443 text
grestore
21000 18000 21000 17800 10 line
19000 18000 19000 17800 10 line
17000 18000 17000 17800 10 line
15000 18000 15000 17800 10 line
13000 18000 13000 17800 10 line
11000 18000 11000 17800 10 line
9000 18000 9000 17800 10 line
7000 18000 7000 17800 10 line
5000 18000 5000 17800 10 line
3000 18000 3000 17800 10 line
gsave
true false true false 208.000000 [(9) ] 0 18000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(10) ] 0 20000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(11) ] 0 22000 1100 144.444443 text
grestore
19000 1200 19000 1000 10 line
21000 1200 21000 1000 10 line
gsave
true false true false 208.000000 [(A) ] 0 22900 2000 144.444443 text
grestore
gsave
true false true false 208.000000 [(B) ] 0 22900 4000 144.444443 text
grestore
gsave
true false true false 208.000000 [(C) ] 0 22900 6000 144.444443 text
grestore
gsave
true false true false 208.000000 [(D) ] 0 22900 8000 144.444443 text
grestore
gsave
true false true false 208.000000 [(E) ] 0 22900 10000 144.444443 text
grestore
gsave
true false true false 208.000000 [(F) ] 0 22900 12000 144.444443 text
grestore
gsave
true false true false 208.000000 [(G) ] 0 22900 14000 144.444443 text
grestore
gsave
true false true false 208.000000 [(H) ] 0 22900 16000 144.444443 text
grestore
gsave
true false true false 208.000000 [(I) ] 0 22900 17500 144.444443 text
grestore
23000 3000 22800 3000 10 line
23000 5000 22800 5000 10 line
23000 7000 22800 7000 10 line
23000 9000 22800 9000 10 line
23000 11000 22800 11000 10 line
23000 13000 22800 13000 10 line
23000 15000 22800 15000 10 line
23000 17000 22800 17000 10 line
gsave
true false true false 208.000000 [(I) ] 0 1100 17500 144.444443 text
grestore
gsave
true false true false 208.000000 [(H) ] 0 1100 16000 144.444443 text
grestore
gsave
true false true false 208.000000 [(G) ] 0 1100 14000 144.444443 text
grestore
gsave
true false true false 208.000000 [(F) ] 0 1100 12000 144.444443 text
grestore
1200 17000 1000 17000 10 line
1200 15000 1000 15000 10 line
1200 13000 1000 13000 10 line
gsave
true false true false 208.000000 [(8) ] 0 16000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(7) ] 0 14000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(6) ] 0 12000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(5) ] 0 10000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(4) ] 0 8000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(3) ] 0 6000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(2) ] 0 4000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(1) ] 0 2000 1100 144.444443 text
grestore
gsave
true false true false 208.000000 [(A) ] 0 1100 2000 144.444443 text
grestore
gsave
true false true false 208.000000 [(B) ] 0 1100 4000 144.444443 text
grestore
gsave
true false true false 208.000000 [(C) ] 0 1100 6000 144.444443 text
grestore
gsave
true false true false 208.000000 [(D) ] 0 1100 8000 144.444443 text
grestore
gsave
true false true false 208.000000 [(E) ] 0 1100 10000 144.444443 text
grestore
1200 1200 22800 1200 10 line
22800 1200 22800 17800 10 line
22800 17800 1200 17800 10 line
1200 17800 1200 1200 10 line
17000 1200 17000 1000 10 line
15000 1200 15000 1000 10 line
13000 1200 13000 1000 10 line
11000 1200 11000 1000 10 line
9000 1200 9000 1000 10 line
7000 1200 7000 1000 10 line
5000 1200 5000 1000 10 line
3000 1200 3000 1000 10 line
1200 3000 1000 3000 10 line
1200 5000 1000 5000 10 line
1200 7000 1000 7000 10 line
1200 9000 1000 9000 10 line
1200 11000 1000 11000 10 line
15200 1800 22800 1800 10 line
15200 1200 22800 1200 10 line
22800 1200 22800 2600 10 line
22800 2600 15200 2600 10 line
15200 2600 15200 1200 10 line
gsave
false false false false 208.000000 [(TITLE) ] 0 15300 1900 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 17000 1300 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 15300 1300 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 18800 1300 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 18800 1600 144.444443 text
grestore
gsave
false false false false 208.000000 [(FILE:) ] 0 15300 1600 144.444443 text
grestore
18700 1800 18700 1200 10 line
1000 1000 23000 1000 10 line
23000 1000 23000 18000 10 line
23000 18000 1000 18000 10 line
1000 18000 1000 1000 10 line
grestore
gsave
false false false false 260.000000 [(Tom King) ] 0 19800 1300 180.555557 text
grestore
gsave
false false false false 260.000000 [(Bone_JTAG_PG2.sch) ] 0 15900 1600 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 0 15900 1300 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 0 17400 1300 180.555557 text
grestore
gsave
false false false false 260.000000 [(0.0.2) ] 0 19800 1600 180.555557 text
grestore
gsave
false false false false 260.000000 [(BeagleBone JTAG Programmer/Debugger) ] 0 16000 2000 180.555557 text
grestore
14900 13100 18600 13100 10 line
18600 13100 18600 15900 10 line
18600 15900 14900 15900 10 line
14900 15900 14900 13100 10 line
14400 15400 14900 15400 10 line
gsave
false false false false 260.000000 [(SCL) ] 0 14955 15395 180.555557 text
grestore
gsave
false true false false 260.000000 [(0) ] 0 14805 15445 180.555557 text
grestore
14400 14900 14900 14900 10 line
gsave
false false false false 260.000000 [(SDA) ] 0 14955 14895 180.555557 text
grestore
gsave
false true false false 260.000000 [(0) ] 0 14805 14945 180.555557 text
grestore
16400 16300 16400 15900 10 line
gsave
false true false false 260.000000 [(Vcc) ] 90 16400 15845 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 90 16350 15995 180.555557 text
grestore
16200 12500 16200 13100 10 line
gsave
false false false false 260.000000 [(GND) ] 90 16400 13155 180.555557 text
grestore
gsave
false true false false 260.000000 [(0) ] 90 16150 13005 180.555557 text
grestore
19200 15400 18600 15400 10 line
gsave
false true false false 260.000000 [(OUT) ] 0 18545 15395 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 18695 15445 180.555557 text
grestore
17200 12600 17200 13100 10 line
gsave
false false false false 260.000000 [(*EN) ] 90 17400 13155 180.555557 text
grestore
gsave
false true false false 260.000000 [(0) ] 90 17150 13005 180.555557 text
grestore
gsave
false false false false 260.000000 [(Si570) ] 0 16500 14400 180.555557 text
grestore
gsave
13400 15400 13600 15400 10 line
12800 15500 12800 15300 10 line
12800 15500 13300 15500 10 line
13300 15500 13400 15400 10 line
13400 15400 13300 15300 10 line
13300 15300 12800 15300 10 line
grestore
gsave
false false false false 260.000000 [(I2C1-SCL) ] 0 11900 15400 180.555557 text
grestore
gsave
17200 12000 17200 12200 10 line
17100 11400 17300 11400 10 line
17100 11400 17100 11900 10 line
17100 11900 17200 12000 10 line
17200 12000 17300 11900 10 line
17300 11900 17300 11400 10 line
grestore
gsave
false false false false 260.000000 [(GPIO2_1) ] 90 17300 10400 180.555557 text
grestore
gsave
13600 14900 13400 14900 10 line
12900 15000 12800 14900 10 line
12800 14900 12900 14800 10 line
13400 14900 13300 14800 10 line
13300 15000 13400 14900 10 line
13300 15000 12900 15000 10 line
13300 14800 12900 14800 10 line
grestore
gsave
false true false false 260.000000 [(I2C1-SDA) ] 0 12700 14900 180.555557 text
grestore
gsave
16400 16700 16400 16900 10 line
16250 16900 16550 16900 10 line
gsave
false false false false 208.000000 [(+3.3V) ] 0 16275 16950 144.444443 text
grestore
grestore
gsave
16200 11700 16200 11900 10 line
16100 11700 16300 11700 10 line
16155 11650 16245 11650 10 line
16180 11610 16220 11610 10 line
grestore
gsave
19500 15400 19700 15400 10 line
19700 15500 19700 15300 10 line
19700 15500 20200 15500 10 line
20200 15500 20300 15400 10 line
20300 15400 20200 15300 10 line
20200 15300 19700 15300 10 line
grestore
gsave
false false false false 260.000000 [(CPLD_CLK) ] 0 20400 15300 180.555557 text
grestore
13600 15400 14400 15400 10 line
13600 14900 14400 14900 10 line
16200 11900 16200 12500 10 line
16400 16300 16400 16700 10 line
19200 15400 19500 15400 10 line
17200 12200 17200 12600 10 line
showpage
%%End
